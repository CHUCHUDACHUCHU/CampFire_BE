name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
    push:
        branches: [main]

# 환경설정
env:
    DOCKER_IMAGE: ghcr.io/${{ github.actor }}/campfire-cicd
    VERSION: ${{ github.sha }}
    NAME: go_cicd

jobs:
    # 빌드 Job
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            # github repository에서 checkout
            - uses: actions/checkout@v2
            # docker build 수행
            - name: Set up docker buildx
              id: buildx
              uses: docker/setup-buildx-action@v1
            - name: Cache docker layers
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ env.VERSION }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-
            # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
            - name: Login to ghcr
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_TOKEN }}
            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  builder: ${{ steps.buildx.outputs.name }}
                  push: true
                  tags: ${{ env.DOCKER_IMAGE }}:latest
    # 배포 Job
    deploy:
        needs: build # build 후에 실행되도록 정의
        name: Deploy
        runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명
        # environment: cicd_test
        steps:
            - name: Login to ghcr
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_TOKEN }}
            # 3000 -> 80 포트로 수행하도록 지정
            - name: Docker run
              run: |
                  docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
                  docker run -d -p 80:3000 \
                        -e MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }} \
                        -e MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }} \
                        -e MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }} \
                        -e MYSQL_DATABASE_TEST: ${{ secrets.MYSQL_DATABASE_TEST }} \
                        -e MYSQL_HOST: ${{ secrets.MYSQL_HOST }} \
                        -e S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }} \
                        -e S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }} \
                        -e PROFILEIMG_BUCKETNAME: ${{ secrets.PROFILEIMG_BUCKETNAME }} \
                        -e POSTIMG_BUCKETNAME: ${{ secrets.POSTIMG_BUCKETNAME }} \
                        -e CRYPTO_SECRET_KEY: ${{ secrets.CRYPTO_SECRET_KEY }} \
                        -e TOKEN_USER_SECRET_KEY: ${{ secrets.TOKEN_USER_SECRET_KEY }} \
                        -e TOKEN_HOST_SECRET_KEY: ${{ secrets.TOKEN_HOST_SECRET_KEY }} \
                        --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
